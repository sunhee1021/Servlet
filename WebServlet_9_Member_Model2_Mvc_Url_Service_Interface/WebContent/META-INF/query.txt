--회원가입 테이블
create table mvcregister(
 id number constraint pk_mvcregister_id primary key,
 pwd varchar2(20) not null,
 email varchar2(20) not null
);

Model2 기반 MVC
MODEL
--DTO : mvcregister 테이블 같은 구조의 클래스 (getter , setter )구현
--DAO : CRUD 함수 (DB 연동 connection pool (DBCP))
--SERVICE 현재 생략

VIEW
--jsp (EL & JSTL)  > servlet 쪽에서 저장(request객체), view지정 , forward 한  데이터 가지고 출력
                   > ${requestScope.list}
--보안상 > WEB-INF > Register 폴더  관리

CONTROLLER
-- frontcontroller 역할  servlet (하나의 servlet 모든 요청 받고 처리)

--Client [요청을 받고] , [판단]하고 , 업무 수행 , 데이터 담고 , view 지정 , forward

판단   1. command 방식 :  servlet.do?cmd=login&id=kglim&pwd=1004   > cmd > if(cmd.equals("login"))
         2. url 방식 :      login.do?id=kglim&pwd=1004  :  login.do > url 주소로 요청을 판단


1. 연결 테스트 (context.xml, ojdbc6.jar추가 , jsp)

2. package 구조 설정

3. dto

4. dao

5. jsp UI

6. controller



테이블(db)만들고 -> model(dto 먼저 )_사실은 model을 만들기전에 package를 나눠야해
-> dao에 들어갈 pool을 만들어야지 -> 그다음 dao를 만들고
->view에서 (jsp) ui만 먼저만들고 -> controller 만들고 -> 그다음 dao사용하고 view를 보여주게 하면됨


-----------------------------------------------------------------------------------------------------------
controller 가 > 요청받고 > 판단하고 > 서비스를 만들고(실행_ db작업 , 암호화 등등)  > 작업
									(dto,dao 생성 작업 등등을 했지 서비스가)
위에처럼 작업하다 보니까 문제점이 생김
1. controller의 코딩 양이 많다
2. 나중에 업무가 추가되거나 변경됐을때 유지보수가 어렵다

해결방안

'서비스를 만들고(실행_ db작업 , 암호화 등등)' 작업을 분리하자!  >  service 에게 위임하자 (dto, dao, 암호화, 알고리즘 등등)

서비스를 좀더 예쁘게 만들수 없을까? (표준화 , 약속) : interface 기반으로 표준화된 설계방법
협업 : 어떤 개발자가 코딩을 해도 같은 양식의 작업을 하게 만들겠다

Action interface 구현 : service 













